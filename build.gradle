buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.github.fracpete:rsync4j-all:3.1.2-15"
    }
}

plugins {
   id "java"
   id "eclipse"

   id "project-report"
   id "jacoco"
   id "com.github.spotbugs" version "4.5.0"
   id "pmd"
   id "org.jbake.site" version "5.3.0"
   id "org.hidetake.ssh" version "2.10.1"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    testImplementation 'junit:junit:4.13'
    implementation 'org.jsoup:jsoup:1.12.1'
    implementation 'com.cedarsoftware:json-io:4.10.1'
    implementation 'org.apache.poi:poi-ooxml:3.12'
    implementation 'org.apache.poi:poi:3.12'
}

repositories {
    jcenter()
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports/tests/test")
}

jar {
    baseName = "WebsiteAnalyzer"

    manifest {
        attributes (
            "Main-Class": "edu.odu.cs.cs350.Main"
        )
    }
}

javadoc {
    failOnError false
    options.with {
        links 'https://docs.oracle.com/javase/8/docs/api/', 'gradle/javadocs/jdk'
    }
}

test {
    finalizedBy jacocoTestReport
    ignoreFailures = true
    reports {
        html.enabled = true
    }

    jacoco {
        append = false
    }
    
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled true
        html.destination file("$buildDir/reports/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {

        }
    }
}

spotbugsMain {
    ignoreFailures = true
    effort = "max"
    reportLevel = "medium"
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    ignoreFailures = true
    ruleSets = [
        "category/java/bestpractices.xml",
        "category/java/codestyle.xml",
        "category/java/design.xml",
        "category/java/errorprone.xml",
        "category/java/performance.xml"
    ]
}

task reports (dependsOn: ["javadoc", "check",
                          "jacocoTestReport",
                          //"jacocoIntegrationTestReport",
                          //"mergedJacocoReportHTML",
                          "projectReport"]) {

    description "Generate all reports and documentation for this project"
}

task copyJDocs (type: Copy) {
    from "build/docs"
    into "build/tmp/website/assets"
    dependsOn "javadoc"
}

task copyReports (type: Copy) {
    from "build/reports"
    into "build/tmp/website/assets"
    dependsOn "reports"
}

task copyJbakeTemplates (type: Copy) {
    from "src/jbake/"
    into "build/tmp/website"
}

jbake {
    srcDirName = "build/tmp/website"
}

task setupWebsite (dependsOn: ["copyJbakeTemplates", "copyReports", "copyJDocs"]) {
}

import com.github.fracpete.rsync4j.RSync;
import com.github.fracpete.processoutput4j.output.ConsoleOutputProcessOutput;

task deployWebsite (dependsOn: "bake") {
    doLast {
        def sourceDir = "build/jbake/";
        def destURL = "linux.cs.odu.edu";
        RSync rsync = new RSync()
                .source(sourceDir)
                .destination(destURL)
                .recursive(true)
                .archive(true)
                .delete(true)
                .verbose(true)
                .rsh("ssh -o IdentitiesOnly=yes");
        ConsoleOutputProcessOutput output = new ConsoleOutputProcessOutput();
        output.monitor(rsync.builder());
    }
}

bake.dependsOn "setupWebsite"
build.dependsOn javadoc
spotbugsTest.enabled = false
